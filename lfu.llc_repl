#include "cache.h"

uint32_t lfu_freq[LLC_SET][LLC_WAY];


// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for(int i=0; i<LLC_SET;i++){
        for(int j=0; j<LLC_WAY;j++){
            lfu_freq[i][j] = 0;
        }
    }
} 

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    // return lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 
    int way_2 = 0;
    
    for ( ; way_2 < NUM_WAY ; way_2++){
        if(block[set][way_2].valid == false){
            break;
        }
    }
    if(way_2 == NUM_WAY){
        int xyz = 0;
        int min_freq = 65535;
        int min_ind = 0;
        for( ; xyz < NUM_WAY; xyz++){
            int tmp_var = lfu_freq[set][xyz];
            if(tmp_var < min_freq){
                min_freq = tmp_var;
                min_ind = xyz;
            }
        }
        return min_ind;
    }
    else{
        return way_2;
    }
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    if(hit){
        lfu_freq[set][way] += 1;
    }
    else{
        lfu_freq[set][way] = 1;
    }

}

void CACHE::llc_replacement_final_stats()
{

}

